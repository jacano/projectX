syntax = "proto3";

import "google/protobuf/descriptor.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

extend .google.protobuf.FieldOptions {
	bool key_field = 60000 [default = false];
}

extend .google.protobuf.MessageOptions {
	int32 msgpool_soft_limit = 60000 [default = 32];
	int32 msgpool_hard_limit = 60001 [default = 384];
}

enum GCProtoBufMsgSrc {
	GCProtoBufMsgSrc_Unspecified = 0;
	GCProtoBufMsgSrc_FromSystem = 1;
	GCProtoBufMsgSrc_FromSteamID = 2;
	GCProtoBufMsgSrc_FromGC = 3;
	GCProtoBufMsgSrc_ReplySystem = 4;
}

message CMsgProtoBufHeader {
	option (msgpool_soft_limit) = 256;
	option (msgpool_hard_limit) = 1024;
	fixed64 client_steam_id = 1;
	int32 client_session_id = 2;
	uint32 source_app_id = 3;
	fixed64 job_id_source = 10 [default = 18446744073709551615];
	fixed64 job_id_target = 11 [default = 18446744073709551615];
	string target_job_name = 12;
	int32 eresult = 13 [default = 2];
	string error_message = 14;
	uint32 ip = 15;
	.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
	uint32 gc_dir_index_source = 201;
}

message CMsgWebAPIKey {
	uint32 status = 1 [default = 255];
	uint32 account_id = 2 [default = 0];
	uint32 publisher_group_id = 3 [default = 0];
	uint32 key_id = 4;
	string domain = 5;
}

message CMsgHttpRequest {
	message RequestHeader {
		string name = 1;
		string value = 2;
	}

	message QueryParam {
		string name = 1;
		bytes value = 2;
	}

	uint32 request_method = 1;
	string hostname = 2;
	string url = 3;
	repeated .CMsgHttpRequest.RequestHeader headers = 4;
	repeated .CMsgHttpRequest.QueryParam get_params = 5;
	repeated .CMsgHttpRequest.QueryParam post_params = 6;
	bytes body = 7;
	uint32 absolute_timeout = 8;
}

message CMsgWebAPIRequest {
	string UNUSED_job_name = 1;
	string interface_name = 2;
	string method_name = 3;
	uint32 version = 4;
	.CMsgWebAPIKey api_key = 5;
	.CMsgHttpRequest request = 6;
	uint32 routing_app_id = 7;
}

message CMsgHttpResponse {
	message ResponseHeader {
		string name = 1;
		string value = 2;
	}

	uint32 status_code = 1;
	repeated .CMsgHttpResponse.ResponseHeader headers = 2;
	bytes body = 3;
}

message CMsgAMFindAccounts {
	uint32 search_type = 1;
	string search_string = 2;
}

message CMsgAMFindAccountsResponse {
	repeated fixed64 steam_id = 1;
}

message CMsgNotifyWatchdog {
	uint32 source = 1;
	uint32 alert_type = 2;
	uint32 alert_destination = 3;
	bool critical = 4;
	uint32 time = 5;
	uint32 appid = 6;
	string text = 7;
}

message CMsgAMGetLicenses {
	fixed64 steamid = 1;
}

message CMsgPackageLicense {
	uint32 package_id = 1;
	uint32 time_created = 2;
	uint32 owner_id = 3;
}

message CMsgAMGetLicensesResponse {
	repeated .CMsgPackageLicense license = 1;
	uint32 result = 2;
}

message CMsgAMGetUserGameStats {
	fixed64 steam_id = 1;
	fixed64 game_id = 2;
	repeated uint32 stats = 3;
}

message CMsgAMGetUserGameStatsResponse {
	message Stats {
		uint32 stat_id = 1;
		uint32 stat_value = 2;
	}

	message Achievement_Blocks {
		uint32 achievement_id = 1;
		uint32 achievement_bit_id = 2;
		fixed32 unlock_time = 3;
	}

	fixed64 steam_id = 1;
	fixed64 game_id = 2;
	int32 eresult = 3 [default = 2];
	repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
	repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
}

message CMsgGCGetCommandList {
	uint32 app_id = 1;
	string command_prefix = 2;
}

message CMsgGCGetCommandListResponse {
	repeated string command_name = 1;
}

message CGCMsgMemCachedGet {
	repeated string keys = 1;
}

message CGCMsgMemCachedGetResponse {
	message ValueTag {
		bool found = 1;
		bytes value = 2;
	}

	repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
}

message CGCMsgMemCachedSet {
	message KeyPair {
		string name = 1;
		bytes value = 2;
	}

	repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
}

message CGCMsgMemCachedDelete {
	repeated string keys = 1;
}

message CGCMsgMemCachedStats {
}

message CGCMsgMemCachedStatsResponse {
	uint64 curr_connections = 1;
	uint64 cmd_get = 2;
	uint64 cmd_set = 3;
	uint64 cmd_flush = 4;
	uint64 get_hits = 5;
	uint64 get_misses = 6;
	uint64 delete_hits = 7;
	uint64 delete_misses = 8;
	uint64 bytes_read = 9;
	uint64 bytes_written = 10;
	uint64 limit_maxbytes = 11;
	uint64 curr_items = 12;
	uint64 evictions = 13;
	uint64 bytes = 14;
}

message CGCMsgSQLStats {
	uint32 schema_catalog = 1;
}

message CGCMsgSQLStatsResponse {
	uint32 threads = 1;
	uint32 threads_connected = 2;
	uint32 threads_active = 3;
	uint32 operations_submitted = 4;
	uint32 prepared_statements_executed = 5;
	uint32 non_prepared_statements_executed = 6;
	uint32 deadlock_retries = 7;
	uint32 operations_timed_out_in_queue = 8;
	uint32 errors = 9;
}

message CMsgAMAddFreeLicense {
	fixed64 steamid = 1;
	uint32 ip_public = 2;
	uint32 packageid = 3;
	string store_country_code = 4;
}

message CMsgAMAddFreeLicenseResponse {
	int32 eresult = 1 [default = 2];
	int32 purchase_result_detail = 2;
	fixed64 transid = 3;
}

message CGCMsgGetIPLocation {
	repeated fixed32 ips = 1;
}

message CIPLocationInfo {
	uint32 ip = 1;
	float latitude = 2;
	float longitude = 3;
	string country = 4;
	string state = 5;
	string city = 6;
}

message CGCMsgGetIPLocationResponse {
	repeated .CIPLocationInfo infos = 1;
}

message CGCMsgSystemStatsSchema {
	uint32 gc_app_id = 1;
	bytes schema_kv = 2;
}

message CGCMsgGetSystemStats {
}

message CGCMsgGetSystemStatsResponse {
	uint32 gc_app_id = 1;
	bytes stats_kv = 2;
	uint32 active_jobs = 3;
	uint32 yielding_jobs = 4;
	uint32 user_sessions = 5;
	uint32 game_server_sessions = 6;
	uint32 socaches = 7;
	uint32 socaches_to_unload = 8;
	uint32 socaches_loading = 9;
	uint32 writeback_queue = 10;
	uint32 steamid_locks = 11;
	uint32 logon_queue = 12;
	uint32 logon_jobs = 13;
}

message CMsgAMSendEmail {
	message ReplacementToken {
		string token_name = 1;
		string token_value = 2;
	}

	message PersonaNameReplacementToken {
		fixed64 steamid = 1;
		string token_name = 2;
	}

	fixed64 steamid = 1;
	uint32 email_msg_type = 2;
	uint32 email_format = 3;
	repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
	uint32 source_gc = 6;
	repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
}

message CMsgAMSendEmailResponse {
	uint32 eresult = 1 [default = 2];
}

message CMsgGCGetEmailTemplate {
	uint32 app_id = 1;
	uint32 email_msg_type = 2;
	int32 email_lang = 3;
	int32 email_format = 4;
}

message CMsgGCGetEmailTemplateResponse {
	uint32 eresult = 1 [default = 2];
	bool template_exists = 2;
	string template = 3;
}

message CMsgAMGrantGuestPasses2 {
	fixed64 steam_id = 1;
	uint32 package_id = 2;
	int32 passes_to_grant = 3;
	int32 days_to_expiration = 4;
	int32 action = 5;
}

message CMsgAMGrantGuestPasses2Response {
	int32 eresult = 1 [default = 2];
	int32 passes_granted = 2 [default = 0];
}

message CGCSystemMsg_GetAccountDetails {
	option (msgpool_soft_limit) = 128;
	option (msgpool_hard_limit) = 512;
	fixed64 steamid = 1;
	uint32 appid = 2;
}

message CGCSystemMsg_GetAccountDetails_Response {
	option (msgpool_soft_limit) = 128;
	option (msgpool_hard_limit) = 512;
	uint32 eresult_deprecated = 1 [default = 2];
	string account_name = 2;
	string persona_name = 3;
	bool is_profile_public = 4;
	bool is_inventory_public = 5;
	bool is_vac_banned = 7;
	bool is_cyber_cafe = 8;
	bool is_school_account = 9;
	bool is_limited = 10;
	bool is_subscribed = 11;
	uint32 package = 12;
	bool is_free_trial_account = 13;
	uint32 free_trial_expiration = 14;
	bool is_low_violence = 15;
	bool is_account_locked_down = 16;
	bool is_community_banned = 17;
	bool is_trade_banned = 18;
	uint32 trade_ban_expiration = 19;
	uint32 accountid = 20;
	uint32 suspension_end_time = 21;
	string currency = 22;
	uint32 steam_level = 23;
	uint32 friend_count = 24;
	uint32 account_creation_time = 25;
	bool is_steamguard_enabled = 27;
	bool is_phone_verified = 28;
	bool is_two_factor_auth_enabled = 29;
	uint32 two_factor_enabled_time = 30;
	uint32 phone_verification_time = 31;
	uint64 phone_id = 33;
	bool is_phone_identifying = 34;
	uint32 rt_identity_linked = 35;
	uint32 rt_birth_date = 36;
	string txn_country_code = 37;
}

message CMsgGCGetPersonaNames {
	repeated fixed64 steamids = 1;
}

message CMsgGCGetPersonaNames_Response {
	message PersonaName {
		fixed64 steamid = 1;
		string persona_name = 2;
	}

	repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
	repeated fixed64 failed_lookup_steamids = 2;
}

message CMsgGCCheckFriendship {
	fixed64 steamid_left = 1;
	fixed64 steamid_right = 2;
}

message CMsgGCCheckFriendship_Response {
	bool success = 1;
	bool found_friendship = 2;
}

message CMsgGCMsgMasterSetDirectory {
	message SubGC {
		uint32 dir_index = 1;
		string name = 2;
		string box = 3;
		string command_line = 4;
		string gc_binary = 5;
	}

	uint32 master_dir_index = 1;
	repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
}

message CMsgGCMsgMasterSetDirectory_Response {
	int32 eresult = 1 [default = 2];
}

message CMsgGCMsgWebAPIJobRequestForwardResponse {
	uint32 dir_index = 1;
}

message CGCSystemMsg_GetPurchaseTrust_Request {
	fixed64 steamid = 1;
}

message CGCSystemMsg_GetPurchaseTrust_Response {
	bool has_prior_purchase_history = 1;
	bool has_no_recent_password_resets = 2;
	bool is_wallet_cash_trusted = 3;
	uint32 time_all_trusted = 4;
}

message CMsgGCHAccountVacStatusChange {
	fixed64 steam_id = 1;
	uint32 app_id = 2;
	uint32 rtime_vacban_starts = 3;
	bool is_banned_now = 4;
	bool is_banned_future = 5;
}

message CMsgGCGetPartnerAccountLink {
	fixed64 steamid = 1;
}

message CMsgGCGetPartnerAccountLink_Response {
	uint32 pwid = 1;
	uint32 nexonid = 2;
}

message CMsgGCRoutingInfo {
	enum RoutingMethod {
		RANDOM = 0;
		DISCARD = 1;
		CLIENT_STEAMID = 2;
		PROTOBUF_FIELD_UINT64 = 3;
		WEBAPI_PARAM_UINT64 = 4;
	}

	repeated uint32 dir_index = 1;
	.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
	.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
	uint32 protobuf_field = 4;
	string webapi_param = 5;
}

message CMsgGCMsgMasterSetWebAPIRouting {
	message Entry {
		string interface_name = 1;
		string method_name = 2;
		.CMsgGCRoutingInfo routing = 3;
	}

	repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
}

message CMsgGCMsgMasterSetClientMsgRouting {
	message Entry {
		uint32 msg_type = 1;
		.CMsgGCRoutingInfo routing = 2;
	}

	repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
}

message CMsgGCMsgMasterSetWebAPIRouting_Response {
	int32 eresult = 1 [default = 2];
}

message CMsgGCMsgMasterSetClientMsgRouting_Response {
	int32 eresult = 1 [default = 2];
}

message CMsgGCMsgSetOptions {
	message MessageRange {
		required uint32 low = 1;
		required uint32 high = 2;
	}

	enum Option {
		NOTIFY_USER_SESSIONS = 0;
		NOTIFY_SERVER_SESSIONS = 1;
		NOTIFY_ACHIEVEMENTS = 2;
		NOTIFY_VAC_ACTION = 3;
	}

	repeated .CMsgGCMsgSetOptions.Option options = 1;
	repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
}

message CMsgGCHUpdateSession {
	message ExtraField {
		string name = 1;
		string value = 2;
	}

	fixed64 steam_id = 1;
	uint32 app_id = 2;
	bool online = 3;
	fixed64 server_steam_id = 4;
	uint32 server_addr = 5;
	uint32 server_port = 6;
	uint32 os_type = 7;
	uint32 client_addr = 8;
	repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
	fixed64 owner_id = 10;
	uint32 cm_session_sysid = 11;
	uint32 cm_session_identifier = 12;
	repeated uint32 depot_ids = 13;
}

message CMsgNotificationOfSuspiciousActivity {
	message MultipleGameInstances {
		uint32 app_instance_count = 1;
		repeated fixed64 other_steamids = 2;
	}

	fixed64 steamid = 1;
	uint32 appid = 2;
	.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
}

message CMsgDPPartnerMicroTxns {
	message PartnerMicroTxn {
		uint32 init_time = 1;
		uint32 last_update_time = 2;
		uint64 txn_id = 3;
		uint32 account_id = 4;
		uint32 line_item = 5;
		uint64 item_id = 6;
		uint32 def_index = 7;
		uint64 price = 8;
		uint64 tax = 9;
		uint64 price_usd = 10;
		uint64 tax_usd = 11;
		uint32 purchase_type = 12;
		uint32 steam_txn_type = 13;
		string country_code = 14;
		string region_code = 15;
		int32 quantity = 16;
		uint64 ref_trans_id = 17;
	}

	message PartnerInfo {
		uint32 partner_id = 1;
		string partner_name = 2;
		string currency_code = 3;
		string currency_name = 4;
	}

	uint32 appid = 1;
	string gc_name = 2;
	.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
	repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
}

message CMsgDPPartnerMicroTxnsResponse {
	enum EErrorCode {
		k_MsgValid = 0;
		k_MsgInvalidAppID = 1;
		k_MsgInvalidPartnerInfo = 2;
		k_MsgNoTransactions = 3;
		k_MsgSQLFailure = 4;
		k_MsgPartnerInfoDiscrepancy = 5;
		k_MsgTransactionInsertFailed = 7;
		k_MsgAlreadyRunning = 8;
		k_MsgInvalidTransactionData = 9;
	}

	uint32 eresult = 1 [default = 2];
	.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
}

